<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.6">
  <GVL Name="Global_Variables" Id="{bcaa4f18-97b1-4818-bac8-1835e8da9e31}">
    <Declaration><![CDATA[//{attribute 'Tc2GvlVarNames'}
VAR_GLOBAL
(*IDControl Ready*)
	IDControlReady:BOOL;
(*Error Massage*)
	Error:BOOL;
	ErrorID:DINT;
	ErrorDescription:STRING;
(*加载配方参数*)
	LoadRecipeParameters:BOOL;
	loadParametersDone:BOOL;
(*设置光栅bias done *)	
	PositionBiasDone:BOOL;
(*回程差*)
	HysteresisError:LREAL;
(*Drive Status*)
	DriveStatus:DINT;//1:Drive Ready;2:Axis is in operation;0:Others
(*光栅漂移误差阈值*)
	LEDriftErrorThreshold:LREAL:=0.001;
(*Lag Distance threshold*)
	PosDiff_LeftTopLin: LREAL:=0.5;
	PosDiff_RightTopLin:LREAL:=0.5;
	PosDiff_LeftBottomLin:LREAL:=0.5;
	PosDiff_RightBottomLin:LREAL:=0.5;	
	PosDiff_LeftInLin: LREAL:=0.5;
	PosDiff_RightInLin:LREAL:=0.5;
	PosDiff_LeftOutLin:LREAL:=0.5;
	PosDiff_RightOutLin:LREAL:=0.5;
(*UserMode Threshold*)
	Threshold_UserTopPos: LREAL:=0.5;
	Threshold_UserBottomPos: LREAL:=0.5;
	Threshold_UserTBLeftPos: LREAL:=0.5;//TB=Top&Bottom
	Threshold_UserTBRightPos: LREAL:=0.5;
	Threshold_UserTopVelo: LREAL:=0.5;
	Threshold_UserBottomVelo: LREAL:=0.5;
	Threshold_UserTBLeftVelo: LREAL:=0.5;
	Threshold_UserTBRightVelo: LREAL:=0.5;
	Threshold_UserInPos: LREAL:=0.5;
	Threshold_UserOutPos: LREAL:=0.5;
	Threshold_UserIOLeftPos: LREAL:=0.5;//IO=In&Out
	Threshold_UserIORightPos: LREAL:=0.5;
	Threshold_UserInVelo: LREAL:=0.5;
	Threshold_UserOutVelo: LREAL:=0.5;
	Threshold_UserIOLeftVelo: LREAL:=0.5;
	Threshold_UserIORightVelo: LREAL:=0.5;
	//
	Range_UserTBTaperPos:LREAL:=4.01;
	Range_UserTBTaperVelo:LREAL:=1.01;
	Range_UserIOTaperPos:LREAL:=4.01;
	Range_UserIOTaperVelo:LREAL:=1.01;
(*UserMode*)
	//UserGapPositionNew:LREAL:=20;//target
	//UserGapVelocityNew:LREAL:=1;//target
(*DebugMode Threshold*)
	Threshold_TopPos_Debug: LREAL:=4;
	Threshold_BottomPos_Debug: LREAL:=4;
	Threshold_TBLeftPos_Debug: LREAL:=4;
	Threshold_TBRightPos_Debug: LREAL:=4;
	Threshold_InPos_Debug: LREAL:=4;
	Threshold_OutPos_Debug: LREAL:=4;
	Threshold_IOLeftPos_Debug: LREAL:=4;
	Threshold_IORightPos_Debug: LREAL:=4;
(*SingleCarrierMode threshold*)
	Threshold_TopPos_SingleCarrier: LREAL:=2;
	Threshold_BottomPos_SingleCarrier: LREAL:=2;
	Threshold_TBLeftPos_SingleCarrier: LREAL:=2;
	Threshold_TBRightPos_SingleCarrier: LREAL:=2;
	Threshold_TopVelo_SingleCarrier: LREAL:=2;
	Threshold_BottomVelo_SingleCarrier: LREAL:=2;
	Threshold_TBLeftVelo_SingleCarrier: LREAL:=2;
	Threshold_TBRightVelo_SingleCarrier: LREAL:=2;
	Threshold_InPos_SingleCarrier: LREAL:=2;
	Threshold_OutPos_SingleCarrier: LREAL:=2;
	Threshold_IOLeftPos_SingleCarrier: LREAL:=2;
	Threshold_IORightPos_SingleCarrier: LREAL:=2;
	Threshold_InVelo_SingleCarrier: LREAL:=2;
	Threshold_OutVelo_SingleCarrier: LREAL:=2;
	Threshold_IOLeftVelo_SingleCarrier: LREAL:=2;
	Threshold_IORightVelo_SingleCarrier: LREAL:=2;
(*Compensation Value*)
	M_Compensation:ARRAY[1..18] OF Struct_M_Compensation
:=[
(Encoder:=0,		LeftTop:=0,			RightTop:=0,		LeftBottom:=0,			RightBottom:=0,			
					LeftIn:=0,			RightIn:=0,			LeftOut:=0,				RightOut:=0,			InRange:=FALSE),
(Encoder:=5,		LeftTop:=5,			RightTop:=5,		LeftBottom:=5,			RightBottom:=5,			
					LeftIn:=5,			RightIn:=5,			LeftOut:=5,				RightOut:=5,			InRange:=FALSE),
(Encoder:=6,		LeftTop:=6,			RightTop:=6,		LeftBottom:=6,			RightBottom:=6,			
					LeftIn:=6,			RightIn:=6,			LeftOut:=6,				RightOut:=6,			InRange:=FALSE),
(Encoder:=7,		LeftTop:=7,			RightTop:=7,		LeftBottom:=7,			RightBottom:=7,			
					LeftIn:=7,			RightIn:=7,			LeftOut:=7,				RightOut:=7,			InRange:=FALSE),
(Encoder:=8,		LeftTop:=8,			RightTop:=8,		LeftBottom:=8,			RightBottom:=8,			
					LeftIn:=8,			RightIn:=8,			LeftOut:=8,				RightOut:=8,			InRange:=FALSE),
(Encoder:=9,		LeftTop:=9,			RightTop:=9,		LeftBottom:=9,			RightBottom:=9,			
					LeftIn:=9,			RightIn:=9,			LeftOut:=9,				RightOut:=9,			InRange:=FALSE),
(Encoder:=10,		LeftTop:=10,		RightTop:=10,		LeftBottom:=10,			RightBottom:=10,			
					LeftIn:=10,			RightIn:=10,		LeftOut:=10,			RightOut:=10,			InRange:=FALSE),
(Encoder:=11,		LeftTop:=11,		RightTop:=11,		LeftBottom:=11,			RightBottom:=11,			
					LeftIn:=11,			RightIn:=11,		LeftOut:=11,			RightOut:=11,			InRange:=FALSE),
(Encoder:=12,		LeftTop:=12,		RightTop:=12,		LeftBottom:=12,			RightBottom:=12,			
					LeftIn:=12,			RightIn:=12,		LeftOut:=12,			RightOut:=12,			InRange:=FALSE),
(Encoder:=13,		LeftTop:=13,		RightTop:=13,		LeftBottom:=13,			RightBottom:=13,			
					LeftIn:=13,			RightIn:=13,		LeftOut:=13,			RightOut:=13,			InRange:=FALSE),
(Encoder:=15,		LeftTop:=15,		RightTop:=15,		LeftBottom:=15,			RightBottom:=15,			
					LeftIn:=15,			RightIn:=15,		LeftOut:=15,			RightOut:=15,			InRange:=FALSE),
(Encoder:=20,		LeftTop:=20,		RightTop:=20,		LeftBottom:=20,			RightBottom:=20,			
					LeftIn:=20,			RightIn:=20,		LeftOut:=20,			RightOut:=20,			InRange:=FALSE),
(Encoder:=22,		LeftTop:=22,		RightTop:=22,		LeftBottom:=22,			RightBottom:=22,			
					LeftIn:=22,			RightIn:=22,		LeftOut:=22,			RightOut:=22,			InRange:=FALSE),
(Encoder:=30,		LeftTop:=30,		RightTop:=30,		LeftBottom:=30,			RightBottom:=30,			
					LeftIn:=30,			RightIn:=30,		LeftOut:=30,			RightOut:=30,			InRange:=FALSE),
(Encoder:=40,		LeftTop:=40,		RightTop:=40,		LeftBottom:=40,			RightBottom:=40,			
					LeftIn:=40,			RightIn:=40,		LeftOut:=40,			RightOut:=40,			InRange:=FALSE),
(Encoder:=50,		LeftTop:=50,		RightTop:=50,		LeftBottom:=50,			RightBottom:=50,			
					LeftIn:=50,			RightIn:=50,		LeftOut:=50,			RightOut:=50,			InRange:=FALSE),
(Encoder:=100,		LeftTop:=100,		RightTop:=100,		LeftBottom:=100,		RightBottom:=100,			
					LeftIn:=100,		RightIn:=100,		LeftOut:=100,			RightOut:=100,			InRange:=FALSE),
(Encoder:=3000.001,	LeftTop:=3000.001,	RightTop:=3000.001,	LeftBottom:=3000.001,	RightBottom:=3000.001,			
					LeftIn:=3000.001,	RightIn:=3000.001,	LeftOut:=3000.001,		RightOut:=3000.001,			InRange:=FALSE)];
(*simulation OR NOT*)
	simulation:BOOL;
(*USELinearEncoeder*)
	USELinearEncoder:BOOL:=TRUE;
(*restartTwinCAT*)
	m_restartTC:BOOL;
(*Plc_EmergencyStop *)
	Plc_EmergencyStop  AT %Q*:BOOL:=TRUE;
(*硬急停*)
	Hardware_EmergencyStop :BOOL:=TRUE;
(*LED*)
	Led_Run  AT %Q*:BOOL;
	Led_Error  AT %Q*:BOOL;
(*LimitSwitch*)
	LS_LeftTop_Far  :BOOL;
	LS_LeftTop_Near  :BOOL;
	LS_RightTop_Far  :BOOL;
	LS_RightTop_Near  :BOOL;
	LS_LeftBottom_Far  :BOOL;
	LS_LeftBottom_Near  :BOOL;
	LS_RightBottom_Far :BOOL;
	LS_RightBottom_Near  :BOOL;
	Unreach_LS_Far:BOOL;
	Unreach_LS_Near:BOOL;
	LS_LeftIn_Far  :BOOL;
	LS_LeftIn_Near  :BOOL;
	LS_RightIn_Far  :BOOL;
	LS_RightIn_Near  :BOOL;
	LS_LeftOut_Far  :BOOL;
	LS_LeftOut_Near  :BOOL;
	LS_RightOut_Far :BOOL;
	LS_RightOut_Near  :BOOL;
(*kill switch*)
	KS_LeftTop_Far_Contact1:BOOL;
	KS_LeftTop_Far_Contact2:BOOL;
	KS_RightTop_Far_Contact1:BOOL;
	KS_RightTop_Far_Contact2:BOOL;
	KS_LeftBottom_Far_Contact1:BOOL;
	KS_LeftBottom_Far_Contact2:BOOL;
	KS_RightBottom_Far_Contact1:BOOL;
	KS_RightBottom_Far_Contact2:BOOL;
	
	KS_LeftTop_Near_Contact1:BOOL;
	KS_LeftTop_Near_Contact2:BOOL;
	KS_RightTop_Near_Contact1:BOOL;
	KS_RightTop_Near_Contact2:BOOL;
	KS_LeftBottom_Near_Contact1:BOOL;
	KS_LeftBottom_Near_Contact2:BOOL;
	KS_RightBottom_Near_Contact1:BOOL;
	KS_RightBottom_Near_Contact2:BOOL;
	
	KS_LeftIn_Far_Contact1:BOOL;
	KS_LeftIn_Far_Contact2:BOOL;
	KS_RightIn_Far_Contact1:BOOL;
	KS_RightIn_Far_Contact2:BOOL;
	KS_LeftOut_Far_Contact1:BOOL;
	KS_LeftOut_Far_Contact2:BOOL;
	KS_RightOut_Far_Contact1:BOOL;
	KS_RightOut_Far_Contact2:BOOL;
	
	KS_LeftIn_Near_Contact1:BOOL;
	KS_LeftIn_Near_Contact2:BOOL;
	KS_RightIn_Near_Contact1:BOOL;
	KS_RightIn_Near_Contact2:BOOL;
	KS_LeftOut_Near_Contact1:BOOL;
	KS_LeftOut_Near_Contact2:BOOL;
	KS_RightOut_Near_Contact1:BOOL;
	KS_RightOut_Near_Contact2:BOOL;
(*E-STOP*)
	KS_CabinetEmergency_contact1:BOOL;
	KS_CabinetEmergency_contact2:BOOL;
	KS_handEmergency1_Contact1:BOOL;
	KS_handEmergency1_Contact2:BOOL;
	KS_handEmergency2_Contact1:BOOL;
	KS_handEmergency2_Contact2:BOOL;
	KS_softEmergency2_Contact:BOOL;
(*aixs_ref*)
	LeftTopLin: axis_ref;
	RightTopLin:axis_ref;
	LeftBottomLin:axis_ref;
	RightBottomLin:axis_ref;
	LeftInLin: axis_ref;
	RightInLin:axis_ref;
	LeftOutLin:axis_ref;
	RightOutLin:axis_ref;
(*axis Position*)
	Pos_LeftTopLin: LREAL;
	Pos_RightTopLin:LREAL;
	Pos_LeftBottomLin:LREAL;
	Pos_RightBottomLin:LREAL;
	Pos_LeftInLin: LREAL;
	Pos_RightInLin:LREAL;
	Pos_LeftOutLin:LREAL;
	Pos_RightOutLin:LREAL;
(*axis Velocity*)
	Velo_LeftTopLin: LREAL;
	Velo_RightTopLin:LREAL;
	Velo_LeftBottomLin:LREAL;
	Velo_RightBottomLin:LREAL;
	Velo_LeftInLin: LREAL;
	Velo_RightInLin:LREAL;
	Velo_LeftOutLin:LREAL;
	Velo_RightOutLin:LREAL;
(*Lag Distance*)
	PosDiff_LeftTopLin_actual: LREAL;
	PosDiff_RightTopLin_actual:LREAL;
	PosDiff_LeftBottomLin_actual:LREAL;
	PosDiff_RightBottomLin_actual:LREAL;
	PosDiff_LeftInLin_actual: LREAL;
	PosDiff_RightInLin_actual:LREAL;
	PosDiff_LeftOutLin_actual:LREAL;
	PosDiff_RightOutLin_actual:LREAL;
(*****************singleCarrier Mode*******************************)
(**)
	TopPositionActual:LREAL;
	TopVelocityActual:LREAL;
	BottomPositionActual:LREAL;
	BottomVelocityActual:LREAL;
	TopMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
	BottomMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
	InPositionActual:LREAL;
	InVelocityActual:LREAL;
	OutPositionActual:LREAL;
	OutVelocityActual:LREAL;
	InMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)
	OutMoveIndicator:DINT:=0;
	(*1=OPEN;0=NOTMOVE;-1=CLOSE*)

(******************SingleCarrier***********************************)
	Diff_TopPos_actual: LREAL;
	Diff_BottomPos_actual: LREAL;
	Diff_TBLeftPos_actual: LREAL;
	Diff_TBRightPos_actual: LREAL;
	Diff_TopVelo_actual:  LREAL;
	Diff_BottomVelo_actual: LREAL;
	Diff_TBLeftVelo_actual: LREAL;
	Diff_TBRightVelo_actual:  LREAL;
	Diff_InPos_actual: LREAL;
	Diff_OutPos_actual: LREAL;
	Diff_IOLeftPos_actual: LREAL;
	Diff_IORightPos_actual: LREAL;
	Diff_InVelo_actual:  LREAL;
	Diff_OutVelo_actual: LREAL;
	Diff_IOLeftVelo_actual: LREAL;
	Diff_IORightVelo_actual:  LREAL;

(******************UserMode*********************)
	Diff_UserTopPos_actual: LREAL;
	Diff_UserBottomPos_actual: LREAL;
	Diff_UserTBLeftPos_actual: LREAL;
	Diff_UserTBRightPos_actual: LREAL;
	Diff_UserTopVelo_actual:  LREAL;
	Diff_UserBottomVelo_actual: LREAL;
	Diff_UserTBLeftVelo_actual: LREAL;
	Diff_UserTBRightVelo_actual:  LREAL;
	Diff_UserInPos_actual: LREAL;
	Diff_UserOutPos_actual: LREAL;
	Diff_UserIOLeftPos_actual: LREAL;
	Diff_UserIORightPos_actual: LREAL;
	Diff_UserInVelo_actual:  LREAL;
	Diff_UserOutVelo_actual: LREAL;
	Diff_UserIOLeftVelo_actual: LREAL;
	Diff_UserIORightVelo_actual:  LREAL;
(******************************************)
	TaperOrNot:BOOL;
	UserTaperPositionActual:LREAL;
	UserTaperVelocityActual:LREAL;
	UserTBTaperPositionActual:LREAL;
	UserTBTaperVelocityActual:LREAL;
	UserIOTaperPositionActual:LREAL;
	UserIOTaperVelocityActual:LREAL;
(***********************Power status and couple statatus***********************)
	st_Power:BOOL;
	st_Couple:DINT;
(************************FB***********************)
	FB_Power:FB_Power;
	FB_PlcEmergencyStop: FB_PlcEmergencyStop;
	FB_Move:FB_Move;
	FB_Stop:FB_Stop;
	(*SingleCarrierMode All Move/Stop*)
	FB_Move_Top:FB_Move;
	FB_Stop_Top:FB_Stop;
	FB_Move_Bottom:FB_Move;
	FB_Stop_Bottom:FB_Stop;
	FB_Move_In:FB_Move;
	FB_Stop_In:FB_Stop;
	FB_Move_Out:FB_Move;
	FB_Stop_Out:FB_Stop;

	M_CompensationNumber:INT;
	M_DisplayNumber:INT;
	
	(*key Command*)
	btn_Power:BOOL;
	btn_PowerOn: BOOL;
	btn_PowerOff: BOOL;
	
	(*Conpensation Position Target*)
	LeftTopLinPositionNew:LREAL;
	LeftBottomLinPositionNew:LREAL;
	RightTopLinPositionNew:LREAL;
	RightBottomLinPositionNew:LREAL;
	LeftInLinPositionNew:LREAL;
	LeftOutLinPositionNew:LREAL;
	RightInLinPositionNew:LREAL;
	RightOutLinPositionNew:LREAL;
	(*考虑到回程差后，运动到临时位置*)
	LeftTopLinPositionNew_temporary :LREAL;
	LeftBottomLinPositionNew_temporary:LREAL;
	RightTopLinPositionNew_temporary:LREAL;
	RightBottomLinPositionNew_temporary:LREAL;
	LeftInLinPositionNew_temporary :LREAL;
	LeftOutLinPositionNew_temporary:LREAL;
	RightInLinPositionNew_temporary:LREAL;
	RightOutLinPositionNew_temporary:LREAL;
	(*Display Position*)
	LeftTopLinPositionDisplay:LREAL;
	LeftBottomLinPositionDisplay:LREAL;
	RightTopLinPositionDisplay:LREAL;
	RightBottomLinPositionDisplay:LREAL;
	LeftInLinPositionDisplay:LREAL;
	LeftOutLinPositionDisplay:LREAL;
	RightInLinPositionDisplay:LREAL;
	RightOutLinPositionDisplay:LREAL;
	(*Display Velocity*)
	LeftTopLinVelocityDisplay:LREAL;
	LeftBottomLinVelocityDisplay:LREAL;
	RightTopLinVelocityDisplay:LREAL;
	RightBottomLinVelocityDisplay:LREAL;
	LeftInLinVelocityDisplay:LREAL;
	LeftOutLinVelocityDisplay:LREAL;
	RightInLinVelocityDisplay:LREAL;
	RightOutLinVelocityDisplay:LREAL;
	(*temperature sensors*)
	thermocouple AT %I*:ARRAY[1..12]OF  DINT;
	shieldPt100  AT %I*:ARRAY[1..12]OF INT;
	thermocouple_Celsius:ARRAY[1..12]OF  LREAL;
	shieldPt100_Celsius  :ARRAY[1..12]OF LREAL;
	huoer_Celsius AT %I* :ARRAY[1..3]OF INT;
	(**)
	lakeshorePt100  AT %I*:ARRAY[1..12]OF INT;(*16*×èÖµ*)
	lakeshorePt100_Resistance :ARRAY[1..12]OF LREAL;(*ÉãÊÏÎÂ¶È*)
	lakeshorePt100_Celsius  :ARRAY[1..12]OF LREAL;(*ÉãÊÏÎÂ¶È*)
	temperatureCompensationValue:LREAL:=6;
	testSensors  AT %I*:ARRAY[1..4]OF INT;

(******RS232************)
	RxBufferEL			: ComBuffer;	(* Receive data buffer; used with all receive function blocks *)
	TxBufferEL			: ComBuffer;	(* Transmit data buffer; used with all receive function blocks *)

END_VAR

]]></Declaration>
  </GVL>
</TcPlcObject>